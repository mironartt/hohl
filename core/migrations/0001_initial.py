# Generated by Django 2.2.5 on 2020-06-21 15:35

import ckeditor_uploader.fields
import core.models.globals
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('title', models.CharField(blank=True, max_length=500, null=True, verbose_name='Заголовок')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Описание')),
                ('alt', models.CharField(blank=True, max_length=80, null=True, verbose_name='Краткое описание (alt)')),
            ],
            options={
                'verbose_name': 'Изображение',
                'verbose_name_plural': 'Изображения',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True, verbose_name='Слаг поста (url адрес)')),
                ('title', models.CharField(blank=True, max_length=500, null=True, verbose_name='Заголовок RU')),
                ('short_description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Краткое описание RU')),
                ('body', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Текс на главной странице RU')),
                ('priority', models.IntegerField(default=10, verbose_name='Приоритет в сортировке')),
                ('availavled', models.BooleanField(default=True, verbose_name='Отображать на сайте')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
                ('need_sending', models.BooleanField(default=True, verbose_name='Необходимо ли разослать подписчикам уведомление')),
                ('main_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Images', verbose_name='Главное изображение поста')),
            ],
            options={
                'verbose_name': 'Пост',
                'verbose_name_plural': 'Посты Блога',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('country', models.CharField(max_length=100, null=True, verbose_name='Страна')),
                ('phone', models.CharField(max_length=20, null=True, verbose_name='Телефон')),
                ('address', models.CharField(max_length=500, null=True, verbose_name='Адрес')),
                ('post_code', models.CharField(max_length=20, null=True, verbose_name='Индекс')),
                ('city', models.CharField(max_length=500, null=True, verbose_name='Город')),
                ('confirm_email', models.BooleanField(default=False, verbose_name='Подтвержден e-mail')),
                ('date_last_emailconfirm_letter', models.DateTimeField(null=True, verbose_name='Дата Последнего отправления подтвержения e-mail')),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(default=core.models.globals.user_default_meta_dict, verbose_name='Дополнительные данные о пользователи')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
